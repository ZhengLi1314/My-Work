if(x > k-2){
return(numList)
break
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(k))
fibonacciNum <- function(k, x = NULL){
if(is.null(x)){
index <- 3
nextX <- 1
}
else{
if(x > k-2){
return(numList)
break}
index <- 3 + x
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(k))
fibonacciNum <- function(k, x = NULL){
if(is.null(x)){
index <- 3
nextX <- 1
}
else{
if(x > k-2){
return(numList)
break}
index <- 3 + x
nextX <- 1 + x
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(k))
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
rm(list=ls())
k <- 8
numList <- c(1, 1)
#Using Loops Method
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
rm(list=ls())
k <- 8
fibonacciNum <- function(k, x = NULL){
if(is.null(x)){
index <- 3
nextX <- 1
}
else{
if(x > k-2){
return(numList)
break}
index <- 3 + x
nextX <- 1 + x
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(k))
k <- 8
numList <- c(1, 1)
#Using Recursive Method
fibonacciNum <- function(k, x = NULL){
if(is.null(x)){
index <- 3
nextX <- 1
}
else{
if(x > k-2){
return(numList)
break}
index <- 3 + x
nextX <- 1 + x
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(k))
fibonacciNum <- function(k, x = NULL){
if(is.null(x)){
index <- 3
nextX <- 1
}
else{
if(x > k-2){
return(numList)
break}
index <- 3 + x
nextX <- 1 + x
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(8))
fibonacciNum <- function(k, x = NULL){
if(is.null(x)){
index <- 3
nextX <- 1
}
else{
if(x > k-2){
return(numList)
}
index <- 3 + x
nextX <- 1 + x
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(8))
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
rm(list=ls())
k <- 8
numList <- c(1, 1)
fibonacciNum <- function(k, x = NULL){
if(is.null(x)){
index <- 3
nextX <- 1
}
else{
if(x > k-2){
return(numList)
}
index <- 3 + x
nextX <- 1 + x
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(8))
View(fibonacciNum)
View(fibonacciNum)
fibonacciNum <- function(k, x = NULL){
index<-0
nextX<-0
if(is.null(x)){
index <- 3
nextX <- 1
}
else{
if(x > k-2){
return(numList)
}
index <- 3 + x
nextX <- 1 + x
}
numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
print(fibonacciNum(8))
print(fibonacciNum(4))
print(fibonacciNum(1))
haha <- function(k, x = NULL){
if(is.null(x)){
return ("haha")
}
}
print(haha())
haha <- function(k, x = NULL){
if(is.null(x)){
return ("haha")
}
else{
return ("nope")
}
}
print(haha(1))
haha <- function(x = NULL){
if(is.null(x)){
return ("haha")
}
else{
return ("nope")
}
}
print(haha(1))
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
numList <- c(1,1)
}
else{
index = length(numList)
if(index > k){
return(numList)
}
numList <- numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, nextX)
}
}
print(fibonacciNum(8))
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
numList <- c(1,1)
}
else{
index = length(numList)
if(index > k){
return(numList)
}
numList <- numList[index] <- numList[index-2] + numList[index-1]
fibonacciNum(k, numList)
}
}
print(fibonacciNum(8))
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
nextNumList <- c(1,1)
}
else{
index = length(numList)
if(index > k){
return(numList)
}
numList <- numList[index] <- numList[index-2] + numList[index-1]
nextNumList <- c(numList)
fibonacciNum(k, nextNumList)
}
}
print(fibonacciNum(8))
rm(list=ls())
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
nextNumList <- c(1,1)
}
else{
index = length(numList)
if(index > k){
return(numList)
}
numList <- numList[index] <- numList[index-2] + numList[index-1]
nextNumList <- c(numList)
fibonacciNum(k, nextNumList)
}
}
print(fibonacciNum(8))
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
nextNumList <- c(1,1)
}
else{
index = length(numList)
if(index > k){
return(numList)
}
numList <- numList[index] <- numList[index-2] + numList[index-1]
nextNumList <- c(numList)
}
fibonacciNum(k, nextNumList)
}
print(fibonacciNum(8))
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
nextNumList <- c(1,1)
}
else{
index = length(numList)
if(index > k){
return(numList)
}
numList[index] <- numList[index-2] + numList[index-1]
nextNumList <- c(numList)
}
fibonacciNum(k, nextNumList)
}
print(fibonacciNum(8))
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
nextNumList <- c(1,1)
}
else{
index = length(numList) + 1
if(index >= k){
return(numList)
}
numList[index] <- numList[index-2] + numList[index-1]
nextNumList <- c(numList)
}
fibonacciNum(k, nextNumList)
}
print(fibonacciNum(8))
rm(list=ls())
k <- 8
numList <- c(1, 1)
#Using Loops Method
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
nextNumList <- c(1,1)
}
else{
index = length(numList) + 1
if(index > k){
return(numList)
}
numList[index] <- numList[index-2] + numList[index-1]
nextNumList <- c(numList)
}
fibonacciNum(k, nextNumList)
}
print(fibonacciNum(8))
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
numList <- c(1,1)
}
else{
index = length(numList) + 1
if(index > k){
return(numList)
}
numList[index] <- numList[index-2] + numList[index-1]
}
fibonacciNum(k, numList)
}
print(fibonacciNum(8))
rm(list=ls())
k <- readline(prompt = "Please enter k")
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
rm(list=ls())
k <- as.integer(readline(prompt = "Please enter k"))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readLine(prompt = "Please enter k"))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readLine(prompt = "Please enter k"))
k <- as.integer(readline(prompt = "Please enter k"))
k <- as.integer(readline(prompt = "Please enter k"))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readline(prompt = "Please enter k"))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
(3:k)
[3:k]
k <- as.integer(readline(prompt = "Please enter k"))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in c(3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readline(prompt = "Please enter k: "))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readline(prompt = "Please enter k: "))
#Using Loops Method
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readline(prompt = "Please enter k: "))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
#Using Loops Method##########################################
k <-8
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readline(prompt = "Please enter k: "))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readline(prompt = "Please enter k: "))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readline(prompt = "Please enter: "))
#Using Loops Method##########################################
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
k <- as.integer(readline(prompt = "Please enter k: "))
k <- as.integer(readline(prompt = "Please enter k: "))
k <- as.integer(readline(prompt = "Please enter k: "))
numList <- c(1, 1)
for (i in (3:k)){
numList[i] <- numList[i-2] + numList[i-1]
}
print(numList)
fibonacciNum <- function(k, numList = NULL){
if(is.null(numList)){
numList <- c(1,1)
}
else{
index = length(numList) + 1
if(index > k){
return(numList)
}
numList[index] <- numList[index-2] + numList[index-1]
}
fibonacciNum(k, numList)
}
print(fibonacciNum(k))
rm(list=ls())
n <- seq(2,10,0.1)
lowestCost <- 0
numBumper <- 0
for (index in (1:length(n))){
i <- n[index]
cost <- (i*i*i)-(7*i*i)+432
if (index == 1){
lowestCost <- cost
numBumper <- i
}
else if(cost < lowestCost){
lowestCost <- cost
numBumper <- i
}
}
print(paste("The minimum cost is for", numBumper, "number of units."))
x <- 2.95
mu <- 3
sigma<-0.18/sqrt(36)
(x-mu)/sigma
x <- 2.95
mu <- 3
sigma<-0.18/sqrt(36)
Z <- (x-mu)/sigma
pnorm(Z)
x <- 291
mu <- 295
sigma<-12/sqrt(50)
Z <- (x-mu)/sigma
1-pnorm(Z)
x <- 291
mu <- 295
sigma<-12/sqrt(50)
Z <- (x-mu)/sigma
pnorm(Z)
x <- 291
mu <- 295
sigma<-12/sqrt(50)
Z <- (x-mu)/sigma
pnorm(Z)*2
install.packages("tinytex")
library(tinytex)
detach("package:tinytex", unload = TRUE)
library(tinytex)
detach("package:tinytex", unload = TRUE)
library(markdown)
library(rmarkdown)
library(tinytex)
tinytex::install_tinytex()
install.packages("C:/Users/lizhe/Downloads/basic-miktex-2.9.7351-x64.exe", repos = NULL)
install.packages("C:/Users/lizhe/Downloads/Rtools35.exe", repos = NULL)
install.packages("C:/Users/lizhe/Downloads/Rtools33.exe", repos = NULL)
install.packages("C:/Users/lizhe/Downloads/Rtools35.exe", repos = NULL)
> install.packages("C:/Users/lizhe/Downloads/Rtools35.exe", "both")
install.packages("C:/Users/lizhe/Downloads/Rtools35.exe", "both")
install.packages("C:/Users/lizhe/Downloads/Rtools35.exe", both)
install.packages("C:/Users/lizhe/Downloads/Rtools35.exe", repos = NULL)
