t.test(newbalance,conf=0.95)
# Import Scheer into the R workspace; name it scheer
scheer <- read.csv("Scheer"); scheer
# Find the 95% confidence interval estimate of the population mean
t.test(scheer,conf=0.95)
#####################################
# Import Scheer into the R workspace; name it scheer
scheer <- read.csv("Scheer.csv"); scheer
# Find the 95% confidence interval estimate of the population mean
t.test(scheer,conf=0.95)
s <- 6.84
alpha <- 0.05
e <- 1.5
z <- pnorm(alpha/2)
x<-(z*s)/e
x*x
s <- 6.84
alpha <- 0.05
e <- 1.5
z <- qnorm(1-(alpha/2))
x<-(z*s)/e
x*x
s <- 6.84
alpha <- 0.10
e <- 2
z <- qnorm(1-(alpha/2))
x<-(z*s)/e
x*x
x <- c(110, 112, 115, 99, 100, 98, 104, 126)
t.test(x, conf=0.9)
st(x)
sd(x)
mydata <- c(110, 112, 115, 99, 100, 98, 104, 126)
t.test(x=mydata, conf=0.9)
mydata <- c(110, 112, 115, 99, 100, 98, 104, 126)
t.test(x=mydata, conf=0.95)
mydata <- c(110, 112, 115, 99, 100, 98, 104, 126)
t.test(x=mydata, conf=0.99)
mydata <- c(110, 112, 115, 99, 100, 98, 104, 126)
t.test(x=mydata, conf=0.90)
n<-7
TEMPT<-0
for (i in (2:n+1)){
TEMPT = i * TEMPT
}
TEMPT
n<-7
TEMPT<-0
for (i in (2:n)){
TEMPT = i * TEMPT
}
TEMPT
n<-7
TEMPT<-1
for (i in (2:n)){
TEMPT = i * TEMPT
}
TEMPT
n<-3
TEMPT<-1
for (i in (2:n)){
TEMPT = i * TEMPT
}
TEMPT
n<-4
TEMPT<-1
for (i in (2:n)){
TEMPT = i * TEMPT
}
TEMPT
n<-7
TEMPT<-1
for (i in (2:n)){
TEMPT = i * TEMPT
}
TEMPT
rm(liist=ls())
n<-7
TEMPT<-1
for (i in (2:n)){
TEMPT <- i * TEMPT
}
TEMPT
myFact = function(num){
if num > 1{
return(myFact(num-1)*num)
}
else{
return(1)
}
}
myFact = function(num){
if num > 1{
return(myFact(num-1)*num)
}
else{
return(1)
}
}
print(myFact(7))
num = 7
myFact = function(num){
if num > 1{
return(myFact(num-1)*num)
}
else{
return(1)
}
}
print(myFact(7))
num = 7
myFact <- function(num){
if num > 1{
return(myFact(num-1)*num)
}
else{
return(1)
}
}
print(myFact(7))
num <- 7
myFact <- function(num){
if num > 1{
return(myFact(num-1)*num)}
else{
return(1)
}
}
print(myFact(7))
num <- 7
myFactRec <- function(num){
if num > 1{
return(myFactRec(num-1)*num)}
else{
return(1)
}
}
print(myFactRec(7))
myFactRec <- function(num){
if num > 1{
return(myFactRec(num-1)*num)}
else{
return(1)
}
}
print(myFactRec(7))
rm(list=ls())
myFactRec <- function(num){
if num > 1{
return(myFactRec(num-1)*num)}
else{
return(1)
}
}
print(myFactRec(7))
rm(list=ls())
myFactRec <- function(k){
if k > 1{
return(myFactRec(k-1)*k)}
else{
return(1)
}
}
print(myFactRec(7))
myFactRec <- function(k){
if k > 1{
return(myFactRec(k-1)*k)}
else{
return(1)
}
}
print(myFactRec(7))
myFactRec <- function(k){
if k > 1{
return(myFactRec(k-1)*k)}
else{
return(1)
}
}
print(myFactRec(7))
myFactRec <- function(k){
if k > 1{
return(myFactRec(k-1)*k)}
else{
return(1)
}
}
print(myFactRec(7))
myFactRec <- function(k){
if k > 1{
return(myFactRec(k-1)*k)}
else{
return(1)
}
}
print(myFactRec(7))
rm(list=ls())
myFactRec <- function(k){
if k > 1{
return(myFactRec(k-1)*k)}
else{
return(1)
}
}
print(myFactRec(7))
rm(list=ls())
myFactRec <- function(k){
if (k > 1){
return(myFactRec(k-1)*k)}
else{
return(1)
}
}
print(myFactRec(7))
rm(list=ls())
myFactRec <- function(k){
if (k > 1){
return(myFactRec(k-1)*k)}
else{
return(k)
}
}
print(myFactRec(7))
rm(list=ls())
myFactRec <- function(k){
if (k > 1){
return(myFactRec(k-1)*k)}
else{
return(1)
}
}
print(myFactRec(7))
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, num1, num2){
tempt <- vector[num1]
vector[num1]<-vector[num2]
vector[num2]<-tempt
return(vector)
}
swipe(nums, 1, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
max = num[2]
for(i in nums[x:]){
if i > nums[x]{
tempt <- vector[x]
vector[x]<-vector[i]
vector[i]<-tempt
}
}
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = num[x]
for(i in nums[x:]){
if i < nums[x]{
min <- nums[i]
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = num[x]
for(i in nums[x:]){
if i < nums[x]{
min <- nums[i]
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = num[x]
for(i in nums[x:length(vector)]){
if i < nums[x]{
min <- nums[i]
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = num[x]
for(i in vector[x:length(vector)]){
if i < vector[x]{
min <- vector[i]
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = num[x]
for(i in vector[x:]){
if i < vector[x]{
min <- vector[i]
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = num[x]
for(i in vector[x:]){
if (i < vector[x]){
min <- vector[i]
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = num[x]
for(i in vector[x:length(vector)]){
if (i < vector[x]){
min <- vector[i]
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = vector[x]
for(i in vector[x:length(vector)]){
if (i < vector[x]){
min <- vector[i]
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = vector[x]
for(i in vector[x:length(vector)]){
if (i < vector[x]){
min <- i
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = vector[x]
for(i in [x:length(vector)]){
if (vector[i] < vector[x]){
min <- i
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = 0
for(i in [x:length(vector)]){
if (vector[i] < vector[x]){
min <- i
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min = 0
for(i in (x:length(vector)){
if (vector[i] < vector[x]){
min <- i
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
}
print(myFactRec(7))
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
min <- 0
for(i in (x:length(vector)){
if (vector[i] < vector[x]){
min <- i
}
}
tempt <- vector[x]
vector[x]<-vector[min]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
minIndex <- 0
for(i in (x:length(vector)){
if (vector[i] < vector[x]){
minIndex <- i
}
}
tempt <- vector[x]
vector[x]<-vector[minIndex]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
minIndex <- x
for(i in (x:length(vector)){
if (vector[i] < vector[x]){
minIndex <- i
}
}
tempt <- vector[x]
vector[x]<-vector[minIndex]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
(x:length(vector)
(x:length(nums)
a<-(x:length(nums)
a
a<-c(x:length(nums)
a
rm(list=ls())
nums<-c(3,5,8,4,1,9,-2)
swipe <- function(vector, x){
minIndex <- x
for(i in (x:length(vector)){
if (vector[i] < vector[x]){
minIndex <- i
}
}
tempt <- vector[x]
vector[x]<-vector[minIndex]
vector[min]<-tempt
return(vector)
}
swipe(nums, 2)
#   Import NewBalance.csv into the R Workspace; name it newbalance
newbalance <- read.csv("NewBalance.csv")
#   Find 95% confidence interval estimate of the population mean
t.test(newbalance, conf = 0.95)
scheer <- read.csv("Scheer.csv")
#   Find 95% confidence interval estimate of the population mean
t.test(scheer, conf = 0.95)
teetimes <- read.csv('TeeTimes.csv')
#   Find 95% confidence interval estimate of the population proportion
t.test(teetimes, conf = 0.95)
